<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:p="http://www.springframework.org/schema/p" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:oxm="http://www.springframework.org/schema/oxm"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/oxm http://www.springframework.org/schema/oxm/spring-oxm-3.2.xsd
		 http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd 
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
        ">
    <context:component-scan base-package="zhang.lao"/>
    <!--配置拦截器, 多个拦截器,顺序执行 -->
    <mvc:interceptors>
        <mvc:interceptor>
            <mvc:mapping path="/console/**"/>
            <bean class="zhang.lao.interceptor.SubmitRepeatInterceptor">
            </bean>
        </mvc:interceptor>
        <mvc:interceptor>
            <mvc:mapping path="/console/**"/>
            <mvc:exclude-mapping path="/console/login/**"/>
            <bean class="zhang.lao.interceptor.LoginInterceptor">

                <!--<property name="unCheckedUrl">
                    <list>
                        <value>/console/login</value>
                        <value>/console/login/</value>
                    </list>

                </property>-->
            </bean>
        </mvc:interceptor>
        <!-- 当设置多个拦截器时，先按顺序调用preHandle方法，然后逆序调用每个拦截器的postHandle和afterCompletion方法 -->
    </mvc:interceptors>
    <bean id="propertyConfigurer"
          class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <!-- 这里支持多种寻址方式：classpath和file -->
                <value>classpath:jdbc.properties</value>
            </list>
        </property>
    </bean>
    <mvc:annotation-driven>
        <mvc:message-converters>
            <bean class="zhang.lao.common.UTF8StringHttpMessageConverter" />
            <bean class="com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter">
                <property name="supportedMediaTypes">
                    <list>
                        <value>application/json;charset=UTF-8</value>
                    </list>
                </property>
                <property name="features">
                    <list>
                        <value>WriteMapNullValue</value>
                        <value>QuoteFieldNames</value>
                    </list>
                </property>
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>
    <!-- 启动 BeanNameUrlHandlerMapping映射器 ，并优先级低于AnnotationHandlerMapping -->
<!--    <bean
            class="org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping">
        <property name="order" value="10"/>
    </bean>-->
    <!-- 启动 注解 映射器 ，将优先级设为最高 -->
<!--    <bean id="handlerMapping"
          class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping">
        <property name="order" value="0"/>
        <property name="urlPathHelper">
            <bean class="org.springframework.web.util.UrlPathHelper">
                <property name="defaultEncoding" value="UTF-8"/>
            </bean>
        </property>
    </bean>-->
    <!-- 模版试图 -->
    <bean name="beetlConfig" class="org.beetl.ext.spring.BeetlGroupUtilConfiguration"
          init-method="init">
        <property name="functions">
            <map>
                <entry key="randomImg">
                    <bean class="zhang.lao.beetl.func.RandomImg"/>
                </entry>
            </map>
        </property>
    </bean>
    <bean name="beetlViewResolver" class="org.beetl.ext.spring.BeetlSpringViewResolver">
        <property name="contentType" value="text/html;charset=UTF-8"/>
        <property name="prefix" value="/WEB-INF/view/"></property>
        <property name="suffix" value=".html"></property>
        <property name="order" value="1"/>
        <property name="config" ref="beetlConfig"/>
    </bean>
    <!-- jiehsu -->
    <!-- jsp视图解析器 -->
    <bean
            class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/jsp/"/>
        <property name="suffix" value=".jsp"/>
        <property name="order" value="2"/>
    </bean>

    <bean id="dataSource" init-method="init"
          class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">
        <property name="driverClassName" value="${jdbc.driver}"></property>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="initialSize" value="1"/>
        <property name="minIdle" value="1"/>
        <property name="maxActive" value="20"/>
        <property name="maxWait" value="60000"/>
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>
        <property name="minEvictableIdleTimeMillis" value="300000"/>
        <property name="validationQuery" value="${jdbc.test}"/>
        <property name="testWhileIdle" value="true"/>
        <property name="testOnBorrow" value="false"/>
        <property name="testOnReturn" value="false"/>
        <property name="poolPreparedStatements" value="true"/>
        <property name="maxPoolPreparedStatementPerConnectionSize"
                  value="20"/>
        <property name="filters" value="stat"/>
    </bean>
    <!-- 开启事务注解驱动 -->
    <tx:annotation-driven transaction-manager="transactionManager"/>

    <!-- 事务管理器 -->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <bean id='sqlSessionFactory' class='org.mybatis.spring.SqlSessionFactoryBean'
          p:dataSource-ref="dataSource" p:configLocation="classpath:mybatis-config.xml">
        <property name="mapperLocations">
            <list>
                <!-- 自动匹配Mapper映射文件 -->
                <value>classpath:zhang/lao/mybatis/auto/mapper/*Mapper.xml</value>
            </list>
        </property>
    </bean>
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="zhang.lao.mybatis.auto.dao"/>
    </bean>
    <!-- 文件上传开始bean -->
    <bean id="multipartResolver"
          class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <!-- set the max upload size100MB -->
        <property name="maxUploadSize">
            <value>104857600</value>
        </property>
        <property name="maxInMemorySize">
            <value>4096</value>
        </property>
    </bean>
    <bean id="exceptionResolver" class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        <property name="exceptionMappings">
            <props>
                <!-- 遇到MaxUploadSizeExceededException异常时，自动跳转到/WEB-INF/jsp/error_fileupload.jsp页面 -->
                <prop key="org.springframework.web.multipart.MaxUploadSizeExceededException">error_fileupload</prop>
            </props>
        </property>
    </bean>
    <bean id="jdbcTemplate"
          class="org.springframework.jdbc.core.JdbcTemplate" abstract="false"
          lazy-init="false" autowire="default">
        <property name="dataSource">
            <ref bean="dataSource"/>
        </property>
    </bean>

    <import resource="ehcache/spring-ehcache.xml"></import>
</beans>